name: PushFlow

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # --------------------------------------------------------------------------------------
  # Linting and static analysis
  # --------------------------------------------------------------------------------------
  lint:
    name: Lint and Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run staticcheck
        uses: dominikh/staticcheck-action@v1.3.1
        with:
          version: "latest"

  # --------------------------------------------------------------------------------------
  # Run tests with MySql (no Redis/Postgres/migrations needed)
  # --------------------------------------------------------------------------------------
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint

    services:
      mysql:
        image: mysql:8
        env:
          MYSql_ROOT_PASSWORD: root
          MYSql_DATABASE: test_xqb_db
          MYSql_USER: test
          MYSql_PASSWORD: test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Wait for MySql
        run: |
          until mysqladmin ping -h 127.0.0.1 -u root -proot --silent; do
            echo "Waiting for MySql..."
            sleep 2
          done

      - name: Run tests
        run: go test -v ./...

  # --------------------------------------------------------------------------------------
  # Security checks scan
  # --------------------------------------------------------------------------------------
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Gosec Security Checker
        uses: securego/gosec@v2.22.4

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  #----------------------------------------------------------------------------------------
  # Build the application
  #----------------------------------------------------------------------------------------
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Build application
        run: go build -v ./...
